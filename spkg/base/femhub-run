#! /usr/bin/env python

import os
from glob import glob
from os.path import expandvars
from optparse import OptionParser

class CmdException(Exception):
    pass

def main():
    systemwide_python = (os.environ["FEMHUB_SYSTEMWIDE_PYTHON"] == "yes")
    if systemwide_python:
        print """\
***************************************************
FEMhub is not installed. Running systemwide Python.
Only use this mode to install FEMhub."
***************************************************"""

    parser = OptionParser(usage="[options] args")
    parser.add_option("-i", "--install",
            action="store", type="str", dest="install", metavar="PACKAGE",
            default="", help="install a spkg package")
    parser.add_option("-d", "--download_packages",
            action="store_true", dest="download",
            default=False, help="download standard spkg packages")
    parser.add_option("-b", "--build",
            action="store_true", dest="build",
            default=False, help="build FEMhub")
    parser.add_option("-j",
            action="store", type="int", dest="cpu_count", metavar="NCPU",
            default=0, help="number of cpu to use (0 = all)")
    options, args = parser.parse_args()
    if options.download:
        download_packages()
        return
    if options.install:
        install_package(options.install, cpu_count=options.cpu_count)
        return
    if options.build:
        build(cpu_count=options.cpu_count)
        return
    if systemwide_python:
        parser.print_help()
    else:
        try:
            import IPython
        except ImportError:
            raise Exception("You need to install 'ipython'")
        IPython.ipapi.launch_new_instance()

def cmd(s):
    r = os.system(s)
    if r != 0:
        raise CmdException("Command '%s' failed with err=%d." % (s, r))

def download_packages():
    print "Downloading standard spkg packages"
    cmd("cd $SAGE_ROOT/spkg/standard; ./download_packages")

    candidates = glob(expandvars("$SAGE_ROOT/spkg/standard/%s-*.spkg" % \
            pkg))

def install_package(pkg, install_dependencies=True, force_install=False,
        cpu_count=0):
    """
    Installs the package "pkg".

    "pkg" can be either a full path, or just the name of the package (with or
    without a version).

    "install_dependencies" ... if True, it will also install all dependencies

    "force_install" ... if True, it will install the package even if it has
                    been already installed

    "cpu_count" ... number of processors to use (0 means the number of
            processors in the  machine)

    Examples:

    >>> install_package("spkg/standard/readline-6.0.spkg")
    >>> install_package("readline-6.0.spkg")
    >>> install_package("readline")

    """
    pkg = pkg_make_absolute(pkg)
    if is_installed(pkg):
        if not force_install:
            print "Package '%s' is already installed" % pkg_make_relative(pkg)
            return
    if install_dependencies:
        print "Installing dependencies for %s..." % pkg
        for dep in get_dependencies(pkg):
            install_package(dep, install_dependencies=False,
                    cpu_count=cpu_count)
    print "Installing %s..." % pkg
    femhub_scripts = ["sage-env", "sage-make_relative"]
    if cpu_count == 0:
        try:
            import multiprocessing
            cpu_count = multiprocessing.cpu_count()
        except ImportError:
            cpu_count = 1

    cmd("mkdir -p $SAGE_ROOT/local/bin")
    for script in femhub_scripts:
        cmd("cp $SAGE_ROOT/spkg/base/%s $SAGE_ROOT/local/bin/" % script)
    if cpu_count > 1:
        os.environ["MAKE"] = "make -j %d" % (cpu_count + 1)
    cmd("$SAGE_ROOT/spkg/base/sage-spkg %s" % pkg)
    cmd("touch $SAGE_ROOT/spkg/installed/%s" % pkg_make_relative(pkg))

def is_installed(pkg):
    pkg = pkg_make_relative(pkg)
    candidates = glob(expandvars("$SAGE_ROOT/spkg/installed/%s" % pkg))
    if len(candidates) == 1:
        return True
    elif len(candidates) == 0:
        return False
    else:
        raise Exception("Internal error: got more candidates in is_installed")

def pkg_make_absolute(pkg):
    if os.path.exists(pkg):
        return pkg

    pkg_default = "$SAGE_ROOT/spkg/standard"
    if os.path.exists(pkg_default):
        return pkg_default

    candidates = glob(expandvars("$SAGE_ROOT/spkg/standard/%s-*.spkg" % \
            pkg))
    if len(candidates) == 0:
        candidates = glob(expandvars("$SAGE_ROOT/spkg/standard/%s*.spkg" % \
            pkg))
    if len(candidates) == 1:
        return candidates[0]
    else:
        print "Too many candidates:"
        print "    " + "\n    ".join(candidates)

    raise Exception("Unknown package")

def pkg_make_relative(pkg):
    pkg = pkg_make_absolute(pkg)
    # This is quite robust:
    pkg_with_version = pkg[pkg.rfind("/")+1:pkg.rfind(".spkg")]
    # This might be a bit fragile:
    pkg_name = pkg_with_version[:pkg_with_version.find("-")]
    return pkg_name

def make_unique(l):
    m = []
    for item in l:
        if item not in m:
            m.append(item)
    return m

def get_dependencies(pkg):
    """
    Gets all (including indirect) dependencies for the package "pkg".

    For simplicity, the dependency graph is currently hardwired in this
    function.
    """
    pkg_name = pkg_make_relative(pkg)
    dependency_graph = {
            "python": ["termcap", "zlib", "readline"],
            "ipython": ["python"],
            "cython": ["python"],
            "sympy": ["python"],
            "lapack": ["fortran"],
            "blas": ["fortran", "lapack"],
            "numpy": ["python", "lapack", "blas"],
            "scipy": ["numpy"],
            "matplotlib": ["freetype", "libpng", "python"],
            "hermes2d": ["cmake", "scipy", "judy", "cython", "matplotlib"],
            "vtk": ["mesa", "cmake"],
            "mayavi": ["python", "configobj", "vtk"],
            "pyparsing": ["python"],
            "pysparse": ["python"],
            "swig": ["python"],
            "sfepy": ["swig", "scipy"],
            "fipy": ["python"],
            "libfemhub": ["python"],
            "python_gnutls": ["gnutls"],
            # TODO: fix "-" in package names (look at how Debian does it)
            # This is actually a femhub-lab:
            "femhub": ["pexpect", "twisted", "setuptools",
                "jinja", "libgpg_error", "libgcrypt", "python_gnutls",
                "docutils", "pygments",
                # this doesn't install without a net connection, because we
                # need jinja2 (we only have 1.2):
                #"sphinx",
                ],
            }
    deps = []
    for dep in dependency_graph.get(pkg_name, []):
        deps.extend(get_dependencies(dep))
        deps.append(dep)
    deps = make_unique(deps)
    return deps


def build(cpu_count=0):
    print "Building FEMhub"
    # Only add the packages that you want to have in FEMhub. Don't add
    # dependencies (those are handled in the get_dependencies() function)
    packages_list = [
            "ipython",
            "hermes2d",
            # requires: setupdocs>=1.0, doesn't work without a net...
            #"mayavi",
            "libfemhub",
            "fipy",
            "sfepy",
            "sympy",
            "femhub-lab",
            ]
    for pkg in packages_list:
        install_package(pkg, cpu_count=cpu_count)
    print
    print "Finished building FEMhub."

if __name__ == "__main__":
    main()

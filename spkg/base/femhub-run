#! /usr/bin/env python

import os
from glob import glob
from os.path import expandvars
from optparse import OptionParser

class CmdException(Exception):
    pass

def main():
    systemwide_python = (os.environ["FEMHUB_SYSTEMWIDE_PYTHON"] == "yes")
    if systemwide_python:
        print """\
***************************************************
FEMhub is not installed. Running systemwide Python.
Only use this mode to install FEMhub."
***************************************************"""

    parser = OptionParser(usage="[options] args")
    parser.add_option("-i", "--install",
            action="store", type="str", dest="install", metavar="PACKAGE",
            default="", help="install a spkg package")
    parser.add_option("-d", "--download_packages",
            action="store_true", dest="download",
            default=False, help="download standard spkg packages")
    parser.add_option("-b", "--build",
            action="store_true", dest="build",
            default=False, help="build FEMhub")
    options, args = parser.parse_args()
    if options.download:
        download_packages()
        return
    if options.install:
        install_package(options.install)
        return
    if options.build:
        build()
        return
    if systemwide_python:
        parser.print_help()
    else:
        try:
            import IPython
        except ImportError:
            raise Exception("You need to install 'ipython'")
        IPython.ipapi.launch_new_instance()

def cmd(s):
    r = os.system(s)
    if r != 0:
        raise CmdException("Command '%s' failed with err=%d." % (s, r))

def download_packages():
    print "Downloading standard spkg packages"
    cmd("cd $SAGE_ROOT/spkg/standard; ./download_packages")


def install_package(pkg, install_dependencies=True):
    """
    Installs the package "pkg".

    "pkg" can be either a full path, or just the name of the package (with or
    without a version).

    "install_dependencies" ... if True, it will also install all dependencies

    Examples:

    >>> install_package("spkg/standard/readline-6.0.spkg")
    >>> install_package("readline-6.0.spkg")
    >>> install_package("readline")

    """
    pkg = pkg_make_absolute(pkg)
    if install_dependencies:
        print "Installing dependencies for %s..." % pkg
        for dep in get_dependencies(pkg):
            install_package(dep, install_dependencies=False)
    print "Installing %s..." % pkg
    femhub_scripts = ["sage-env", "sage-make_relative"]
    try:
        import multiprocessing
        cpu_count = multiprocessing.cpu_count()
    except ImportError:
        cpu_count = 1

    cmd("mkdir -p $SAGE_ROOT/local/bin")
    for script in femhub_scripts:
        cmd("cp $SAGE_ROOT/spkg/base/%s $SAGE_ROOT/local/bin/" % script)
    if cpu_count > 1:
        os.environ["MAKE"] = "make -j %d" % (cpu_count + 1)
    cmd("$SAGE_ROOT/spkg/base/sage-spkg %s" % pkg)

def pkg_make_absolute(pkg):
    if os.path.exists(pkg):
        return pkg

    pkg_default = "$SAGE_ROOT/spkg/standard"
    if os.path.exists(pkg_default):
        return pkg_default

    candidates = glob(expandvars("$SAGE_ROOT/spkg/standard/%s-*.spkg" % \
            pkg))
    if len(candidates) == 0:
        candidates = glob(expandvars("$SAGE_ROOT/spkg/standard/%s*.spkg" % \
            pkg))
    if len(candidates) == 1:
        return candidates[0]
    else:
        print "Too many candidates:"
        print "    " + "\n    ".join(candidates)

    raise Exception("Unknown package")

def pkg_make_relative(pkg):
    pkg = pkg_make_absolute(pkg)
    # This is quite robust:
    pkg_with_version = pkg[pkg.rfind("/")+1:pkg.rfind(".spkg")]
    # This might be a bit fragile:
    pkg_name = pkg_with_version[:pkg_with_version.find("-")]
    return pkg_name

def make_unique(l):
    m = []
    for item in l:
        if item not in m:
            m.append(item)
    return m

def get_dependencies(pkg):
    """
    Gets all (including indirect) dependencies for the package "pkg".

    For simplicity, the dependency graph is currently hardwired in this
    function.
    """
    pkg_name = pkg_make_relative(pkg)
    dependency_graph = {
            "python": ["termcap", "zlib", "readline"],
            "ipython": ["python"],
            "cython": ["python"],
            "sympy": ["python"],
            "lapack": ["fortran"],
            "blas": ["fortran", "lapack"],
            "numpy": ["python", "lapack", "blas"],
            "scipy": ["numpy"],
            "matplotlib": ["freetype", "libpng", "python"],
            "hermes2d": ["cmake", "scipy", "judy"],
            "vtk": ["mesa", "cmake"],
            "mayavi": ["python", "configobj", "vtk"],
            "pyparsing": ["python"],
            "pysparse": ["python"],
            "swig": ["python"],
            "sfepy": ["swig", "scipy"],
            "fipy": ["python"],
            "libfemhub": ["python"],
            }
    deps = []
    for dep in dependency_graph.get(pkg_name, []):
        deps.extend(get_dependencies(dep))
        deps.append(dep)
    deps = make_unique(deps)
    return deps


def build():
    print "Building FEMhub"
    base_list = [
            "termcap",
            "zlib",
            "readline",
            "python",
            "ipython",
            "cython",
            "sympy",

            "fortran",
            "lapack",
            "blas",
            "freetype",
            "libpng",
            "numpy",
            "scipy",
            "matplotlib",

            "cmake",
            "hermes2d",
        ]
    other = [
            "pexpect",
            "twisted",
            "setuptools",
            "jinja",
            "libgpg_error",
            "libgcrypt",
            "gnutls",
            "python_gnutls",
            "docutils",
            "pygments",
            "sphinx",
            "femhub-lab",


            "judy",
            "mesa",
            "vtk-cvs",
            "configobj",
            "mayavi",
            "pyparsing",
            "swig",
            "sfepy",
            "pysparse",
            "fipy",
            "libfemhub",
            ]
    packages_list = base_list
    for pkg in packages_list:
        install_package(pkg, install_dependencies=False)
    print
    print "Finished building FEMhub."

if __name__ == "__main__":
    main()
